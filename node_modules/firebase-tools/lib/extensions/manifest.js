"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeToManifest = void 0;
const clc = require("cli-color");
const refs = require("./refs");
const logger_1 = require("../logger");
const prompt_1 = require("../prompt");
async function writeToManifest(specs, config, options) {
    if (config.has("extensions") &&
        Object.keys(config.get("extensions")).length &&
        !options.nonInteractive &&
        !options.force) {
        const currentExtensions = Object.entries(config.get("extensions"))
            .map((i) => `${i[0]}: ${i[1]}`)
            .join("\n\t");
        const overwrite = await (0, prompt_1.promptOnce)({
            type: "list",
            message: `firebase.json already contains extensions:\n${currentExtensions}\nWould you like to overwrite or merge?`,
            choices: [
                { name: "Overwrite", value: true },
                { name: "Merge", value: false },
            ],
        });
        if (overwrite) {
            config.set("extensions", {});
        }
    }
    writeExtensionsToFirebaseJson(specs, config);
    await writeEnvFiles(specs, config, options.force);
}
exports.writeToManifest = writeToManifest;
function writeExtensionsToFirebaseJson(specs, config) {
    const extensions = config.get("extensions", {});
    for (const s of specs) {
        extensions[s.instanceId] = refs.toExtensionVersionRef(s.ref);
    }
    config.set("extensions", extensions);
    logger_1.logger.info("Adding Extensions to " + clc.bold("firebase.json") + "...");
    config.writeProjectFile("firebase.json", config.src);
}
async function writeEnvFiles(specs, config, force) {
    for (const spec of specs) {
        const content = Object.entries(spec.params)
            .map((r) => `${r[0]}=${r[1]}`)
            .join("\n");
        await config.askWriteProjectFile(`extensions/${spec.instanceId}.env`, content, force);
    }
}
